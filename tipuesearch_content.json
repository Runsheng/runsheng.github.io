{"pages":[{"url":"/r-packages-xin-shu-pdfzi-xing-bian-yi-ubuntu-1404.html","text":"前段日子Hadley Wickham的新书 'R packages'也算是上线了，美亚有售 实体版 。 不过本书的所有资源包括原文和代码都可以在 github 以及 网站 上找到，所以其实是开源的。 网页版本很漂亮读起来也很不错甚至可以本地编译网站(Ruby based)，但是我辈diaosi还是想看pdf。 Hadley其实写了build-book.r，只要有R和LaTeX就可以生成pdf，步骤简介如下(看了 Brett Klamer的blog , 一路走下来,果断没成...稍微改了下步骤): 1. 下载 git clone https : //github.com/hadley/r-pkgs/ 可以看到/book/目录下的build-book.r, 里面需要载入rmarkdown和bookdown两个library.所以下载之. 2. devtool安装rmarkdown和bookdown install . packages ( \"devtools\" ) # 先装 devtools devtools :: install_github ( \"hadley/devtools\" ) # devtools 更新为 Hadley 的开发版 , 可以不做 devtools :: install_github ( c ( \"rstudio/rmarkdown\" , \"hadley/bookdown\" )) 其中 devtools::install_github(\"hadley/devtools\") ,在现在的版本(2015/06/29)不执行也行. 3. 从CRAN安装所有依赖包 install . packages ( c ( \"knitr\" , \"pryr\" , \"nycflights13\" , \"png\" , \"stringi\" , \"lubridate\" , \"testthat\" )) 主要是bookdown的依赖包. 4. XeLaTeX以及附加字体库，ubuntu可以apt装. sudo apt-get install texlive-xetex sudo apt-get install fonts-inconsolata sudo apt-get install texlive-xetex-extra 需要包括字体库upquote.sty和emptypage.sty (在texlive-xetex-extra里打包了), 如果想单装,在debian里面还是比较麻烦, 因为tlmgr install在debian里面是不能用的~ 5. 运行 /book/build-book.r文件 直到最后一行返回TRUE才是正确的生成了PDF文件\"r-packages.pdf\"，文件可以在/book文件夹找到. file . copy ( \"book/tex/r-packages.pdf\" , \"book/r-packages.pdf\" , overwrite = TRUE ) [ 1 ] TRUE 如果有X和Rstudio，自然是用Rstudio打开r-pkgs.Rproj文件，之后打开/book/build-book.r文件逐行运行. 比如我第一次运行在46行 system(\"xelatex -interaction=batchmode r-packages \") 卡住 只显示 \" This is XeTeX , Version 3.1415926 - 2.5 - 0.9999.3 ( TeX Live 2013 / Debian ) restricted \\ write18 enabled . entering extended mode \" 而没有停顿, 这是因为LaTex缺少了字体文件而没有工作, 装了texlive-xetex-extra之后就好了.（注: 这个warning是正常信息，restricted \\write18 并不影响最终PDF的生成). 附上编译的例子: 点我 . 2015/06/29,由于本书还在频繁更新,要看还是自己弄个吧.","tags":"中文","title":"R packages 新书 PDF自行编译 (ubuntu 14.04)"},{"url":"/shi-yong-pelicanda-jian-ji-yu-gitde-jing-tai-bo-ke.html","text":"缘由 最终还是决定把博客挪到github上, 因为还是要用win, endnote重度依赖是一方面.处理\"excel达人\"遗留的神奇宏绘图是另一方面. 所以不得不在win下配好pelican. 最小环境配置 git python环境,我是python2.7.10 pip一定要配好 用不用virtualenv全看个人喜好 GNU make for win , 稍微有点麻烦,装好了还得记得加环境变量. 写markdown的编辑器得有个,我现在拿sublime写,开着vim model(就是大家说的真-神经病模式). 但是说实话win下gvim太难用了, 不算是真正能投入使用的工具, 没有偏爱的文本编辑器的话, notepad其实也可一用. 装装装 pip install pelican pip install markdown 建个文件夹比如d:/blog之类的,进去,开cmd pelican - quickstart 一路回车下来, 这些问题其实是回答pelicanconf.py的一些参数, 可以随便写了之后再改. 比如我的配置是 #!/usr/bin/env python # -*- coding: utf-8 -*- # from __future__ import unicode_literals AUTHOR = u'Runsheng' SITENAME = u'Buskined bioinformatics' SITEURL = '' PATH = 'content' TIMEZONE = 'Asia/Shanghai' DEFAULT_LANG = u'en' 建一个测试页面试下 在 content 目录里面随便写个 test.md, 其中Title, data, Author三项必须有,否则 duang~ 另外data的支持形式还算多样: 2015/06/17, 2015-06-17之类的都没问题 Title: 使用 pelican 搭建基于 git 的静态博客 Date: 2015 / 06 / 17 Category: 中文 Tags: python Author: runsheng 之后回到 blog 根目录, 也就是makefile在的地方, make html . 该命令其实等价于 pelican D:/blog/content/ -o D:/blog/output -s D:/blog/pelicanconfg.py . 也就是说如果不幸 GNU make 装不好的话也是有办法运行pelican的. 可喜可贺,可喜可贺啊. 生成的网页文件在/output下面. 如果通过了,'make serve'就可以在'localhost:8000'看下了. 精雕细琢 换主题 在blog目录下,把所有集成主题全部拿下一个个挑 git clone -- recursive https : //github.com/getpelican/pelican-themes 结果最后还是用了bootstrap变体, pelican-bootstrap3, 这个主题现在有个小坑, 在使用tipue_search插件搜索的时候, 搜索到的结果会返回 undefined. 不过这个分支 https://github.com/phips/pelican-bootstrap3/tree/bump_tipue_to_v5/ 可以解决这个问题, 看到已经提交了pull request. 把改动的几个css和js放到 pelican-bootstrap3/static/tipuesearch下面替换现有文件即可. 根据主题选插件 在blog目录下,把所有集成插件全部拿下 git clone -- recursive https : //github.com/getpelican/pelican-plugins 虽然大部分插件都是全主题可用的,但是也存在好用与否的问题, 有些插件在原生主题上就需要你自己改base.css才能用,所以尽量配套选,避免麻烦. 最终状态 需要注意的是PATHS参数现在同意接受list而不是string作为参数了,当然 PLUGIN_PATHS = 'D:/blog/pelican-plugins' 也能用, 但是会出warning. PLUGIN_PATHS = [ ' D :/ blog / pelican - plugins ' ] PLUGINS = [ ' summary ',' sitemap ',' neighbors ',' tipue_search ',' tag_cloud ' ] DIRECT_TEMPLATES = ( ' index ' , ' categories ' , ' authors ' , ' archives ' , ' search ' ) tipue_search 在 PLUGINS 中加入 'tipue_search' ,在 DIRECT_TEMPLATES 加入 'search' . tag_cloud 老实说,这个是不得不用,如果不打开,那么 tag 显示永远为空. 在 PLUGINS 中加入 'tag_cloud' , DISPLAY_TAGS_ON_SIDEBAR = True TAGS_URL = \"tags.html\" tag_cloud = True sitemap 在 PLUGINS 中加入 'sitemap' ,这样每次make html之后会生成site.xml文件供搜索. SITEMAP = { ' format ' : ' xml ' , ' priorities ' : { ' articles ' : 0.7 , ' indexes ' : 0.5 , ' pages ' : 0.5 }, ' changefreqs ' : { ' articles ' : ' monthly ' , ' indexes ' : ' daily ' , ' pages ' : ' monthly ' } } Disqus评论账户 git只存储静态网页,动态的评论可以托管给Disqus系统,国内的比如多说其实也可以, 但是原生不支持, 需要插件. DISQUS_SITENAME = ' Shortname ' Google Analytics 拿到的 tracking ID 是 'UA-00000000-0' 格式的 GOOGLE_ANALYTICS = ' Tracking ID '","tags":"中文","title":"使用pelican搭建基于git的静态博客"},{"url":"/quick-guide-for-parameters-in-tophat-cufflinks-in-nematode-rna-seq-analysis.html","text":"The summary of tophat-cufflinks protocol is like that: step1: generate a tophat_out folder with bam files tophat -G genes.gtf <index> sample1_1.fq sample1_2.fq tophat -G genes.gtf <index> sample2_1.fq sample2_2.fq step2: generate new .gtf files (assemble isoform) cufflinks sample1/accepted_hits.bam cufflinks sample2/accepted_hits.bam step3: prepare a text file named assemblies.txt with following gtf files cat << EOF > assemblies.txt >sample1/transcript.gtf >sample2/transcript.gtf >EOF step4: run cuffmerge to generate merged.gtf cuffmerge -g genes.gtf -s genome.fa assemblies.txt step5: compare gene expressions of two samples cuffdiff merged.gtf sample1/accepted_hits.bam sample2/accepted_hits.bam The protocol specifically used for our data step0: access to the data Open the web serve at , the passwd is The result can be downloaded and viewed in *** in the shell, type: 'cd ~/new2/RNAseq/trim' step1: generate a tophat_out folder with bam files, using only JU1421-1 as example \"-N 8 \\ --read-gap-length 8 \\ --read-edit-dist 8 \\\" are generally called mismatch, this means the mismatch for the mapping is 8. Using this parameter, we can only find 69% JU1421 reads are mapped. tophat2 -p 15 -i 20 -I 5000 -g 10 \\ -N 8 \\ --read-gap-length 8 \\ --read-edit-dist 8 \\ -o ./tophat_out/JU1421-1 \\ -G ../genome/GENES.gff3 \\ ../genome/cb4_ws242 \\ JU1421-1_S1_L001_R1_001_trimpair.fastq.gz,JU1421-1_S1_L001_R2_001_trimpair.fastq.gz \\ All reads should be mapped using the same parameters. For AF16, the example is: tophat2 -p 15 -i 20 -I 5000 -g 10 \\ -N 8 \\ --read-gap-length 8 \\ --read-edit-dist 8 \\ -o ./tophat_out/AF16-1 \\ -G ../genome/GENES.gff3 \\ ../genome/cb4_ws242 \\ AF16-1_S1_L001_R1_001_trimpair.fastq.gz,AF16-1_S1_L001_R2_001_trimpair.fastq.gz \\ step2: generate new .gtf files (assemble isoform) cufflinks -p 8 -o ./tophat_out/JU1421-1 ./tophat_out/JU1421-1/accepted_hits.bam cufflinks -p 8 -o ./tophat_out/JU1421-2 ./tophat_out/JU1421-2/accepted_hits.bam cufflinks -p 8 -o ./tophat_out/JU1421-3 ./tophat_out/JU1421-3/accepted_hits.bam cufflinks -p 8 -o ./tophat_out/AF16-1 ./tophat_out/AF16-1/accepted_hits.bam cufflinks -p 8 -o ./tophat_out/AF16-2 ./tophat_out/AF16-2/accepted_hits.bam cufflinks -p 8 -o ./tophat_out/AF16-3 ./tophat_out/AF16-3/accepted_hits.bam step3: prepare a text file named assemblies.txt with following gtf files cat << EOF > assemblies.txt >JU1421-1/transcript.gtf >JU1421-2/transcript.gtf >JU1421-3/transcript.gtf >AF16-1/transcript.gtf >AF16-2/transcript.gtf >AF16-3/transcript.gtf >EOF step4: run cuffmerge to generate merged.gtf cuffmerge -g ../genome/GENES.gff3 -s ../genome/cb4_ws242.fa assemblies.txt step5: compare gene expressions of two samples cuffdiff -p 8 merged.gtf –L JU1421,AF16 \\ ./JU1421-1/accepted_hits.bam, \\ ./JU1421-2/accepted_hits.bam, \\ ./JU1421-3/accepted_hits.bam \\ ./AF16-1/accepted_hits.bam, \\ ./AF16-2/accepted_hits.bam, \\ ./AF16-3/accepted_hits.bam \\","tags":"en","title":"Quick guide for parameters in tophat-cufflinks in nematode RNA-seq analysis"},{"url":"/start-a-ipython-notebook-server-with-password-login.html","text":"As I finally realized that, to install a rpy2 package on Windows is almost a mission impossible, I decide to install a ipython notebook server on the remote machine instead. So I can generate the R script from python and run by \"R cmd run run.r\". Naive, but it works... The offical website suggest to use SSL in login, however, I may have to use the server with public computer. So password login should be more convenient. Here is the step: 1. First, create a hashed password. In [ 1 ]: from IPython.lib import passwd In [ 2 ]: passwd () Enter password : Verify password : Out [ 3 ]: 'sha1:5dd097...' 2. Create a custom profile for the notebook, with the following command line, type: $ ipython profile create nbserver 3. Change the Config file(ipython_notebook_config.py), add the following lines, c = get_config () # Kernel config c . IPKernelApp . pylab = ' inline ' # if you want plotting support always # Notebook config c . NotebookApp . certfile = u ' / absolute / path / to / your / certificate / mycert . pem ' c . NotebookApp . ip = '*' c . NotebookApp . open_browser = False c . NotebookApp . password = u ' sha1 : 5 dd097 ... ' [ the hashed password generated by IPython . lib . passwd ] ' # Define a port c . NotebookApp . port = 8888 4. Make it run: ipython notebook --profile = nbserver Then the server can be accessed by using the \"http://server_IP:8888\" , you will have to enter the password for login.","tags":"en","title":"Start a ipython notebook server with password login"},{"url":"/about-me.html","text":"Runsheng li Current; postdoc @ HKBU PhD; @ NJAU BSc; @ NWSUAF 望海潮 / 过长江 [ 2013 / 11 / 09 于南京 ] 繁花将尽，金曦尚远，中夜过此长江。 归路几识，长涛漫卷，人世些许风霜。 有皎月清朗， 奈何乱灯碍，难照衣裳。 觅觅寻寻，信知吴楚菲今乡。 何曾止住彷徨！ 笑浮云即吾，胡乱飞扬。 西北东南，三京两镇，参差万里行藏。 当不语离殇。 但放眼极目，层峦叠嶂。 想问何时风起，吹我过高岗。","tags":"aboutme","title":"About me"}]}